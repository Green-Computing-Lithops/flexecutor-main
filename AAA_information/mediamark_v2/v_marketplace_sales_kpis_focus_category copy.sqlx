config {
  type: "view",
  schema: "data_share",
  tags: ["stg_init_views_0","data_share"],
  description: "Contains the monthly sales metrics with focus category and vertical category breakdown",
  columns: {
    month_reference: "Represents the month reference",
    fiscal_year_id: "Represents the fiscal year ID based on the date reference",
    salesline: "Represents the sales line, defined by shop and country",
    country: "Represents the country",
    focus_category_id: "Represents the focus category ID",
    focus_category_name: "Represents the focus category name",
    vertical_category_name: "Represents the vertical category name",
    category_class: "Represents the category classification",
    
    gmv_with_shipping_financial_view: "Represents the gross merchandise value with shipping in the financial view",
    gmv_with_shipping: "Represents the gross merchandise value with shipping",
    retail_gross_order_value: "Represents the retail gross order value",
    
    active_sellers: "Represents the number of active sellers",
    active_products: "Represents the number of active products",
    orders: "Represents the total number of orders on logistic level (mirakl logic)",
    
    total_sessions_pdp_mp: "Represents the total valid sessions for product display page in the marketplace",
    total_sessions_pdp_mp_mobile: "Represents the total valid sessions for product display page in the marketplace on mobile",
    total_sessions_pdp_mp_desktop: "Represents the total valid sessions for product display page in the marketplace on desktop",
    total_sessions_pdp_mp_app: "Represents the total valid sessions for product display page in the marketplace on app",
    
    orderlines_accepted: "Represents the number of accepted orderlines",
    orderlines_with_incident: "Represents the number of orderlines with incidents",
    orderlines_with_refunds: "Represents the number of orderlines with refunds",
  }
}

with
last_month_values as (
  select
    date_reference,
    salesline,
    -- sellers,
    -- active_products,
    ---- open sellers latest date
    last_value(sellers) over (
      partition by date_trunc(date_reference, month),salesline
      order by date_reference asc
      rows between unbounded preceding and unbounded following
    ) as active_sellers,
    ---- active products latest date
    last_value(active_products) over (
      partition by date_trunc(date_reference, month),salesline
      order by date_reference asc
      rows between unbounded preceding and unbounded following
    ) as active_products,
  from
    ${ref("prod_sales_reports","sales_kpis_daily")}
  where
    1 = 1
)
,orderlines_daily as (
  select
    date(ordl.date_created) as date_reference
    ,`mms-mag-reporting-p.udf.get_salesline`(ordl.salesline) as salesline
    ,count(distinct if(date_waiting_debit is not null,ordl.order_line_id,null)) as orderlines_accepted
    ,count(distinct(if(ordl.date_incident_open is not null,ordl.order_line_id,null))) as orderlines_w_incident
    ,count(distinct(if(ordl.has_refunds = 1, ordl.order_line_id,null))) as orderlines_refunded_order_date
  from
    ${ref("prod_sales_reports","orderlines_latest")} ordl
  where
    1 = 1
  group by
    all
)

, sessions_total as (
  select
    session_date as date_reference,
    salesline,
    sum(total_sessions_pdp_mp) as total_sessions_pdp_mp,
    sum(if(sales_channel = 'MOBILE', total_sessions_pdp_mp, 0)) as total_sessions_pdp_mp_mobile,
    sum(if(sales_channel = 'DESKTOP', total_sessions_pdp_mp, 0)) as total_sessions_pdp_mp_desktop,
    sum(if(sales_channel = 'APP', total_sessions_pdp_mp, 0)) as total_sessions_pdp_mp_app
  from  ${ref("prod_customer_journey_reports","sessions_total")}
  where
    1 = 1
    and session_is_valid = true
  group by all
)

-- Include the case of MediaSaturnDE : (We do in a double CTE to maintain clarity)
, sessions_total_and_orderlines_MediaSaturnDE as (
  select
    session_date as date_reference,
    salesline,
    sum(total_sessions_pdp_mp) as total_sessions_pdp_mp,
    sum(if(sales_channel = 'MOBILE', total_sessions_pdp_mp, 0)) as total_sessions_pdp_mp_mobile,
    sum(if(sales_channel = 'DESKTOP', total_sessions_pdp_mp, 0)) as total_sessions_pdp_mp_desktop,
    sum(if(sales_channel = 'APP', total_sessions_pdp_mp, 0)) as total_sessions_pdp_mp_app
  from  `mms-mag-reporting-p.prod_customer_journey_reports.sessions_total`
  where
    1 = 1
    and session_is_valid = true
  group by all
)

-- Include the case of MediaSaturnDE : (We do in a double CTE to maintain clarity)
-- Include the case of Global : (We do in a double CTE to maintain clarity)
, sessions_total_and_orderlines_union_all as (
  select 
    *
  from 
    sessions_total st
    left join orderlines_daily ordl using(date_reference, salesline)

  UNION ALL
  
  select 
    date_reference,
    'MediaSaturnDE' as salesline,
    sum(total_sessions_pdp_mp) as total_sessions_pdp_mp,
    sum(total_sessions_pdp_mp_mobile) as total_sessions_pdp_mp_mobile,
    sum(total_sessions_pdp_mp_desktop) as total_sessions_pdp_mp_desktop,
    sum(total_sessions_pdp_mp_app) as total_sessions_pdp_mp_app,
    sum(orderlines_accepted) as orderlines_accepted,
    sum(orderlines_w_incident) as orderlines_w_incident,
    sum(orderlines_refunded_order_date) as orderlines_refunded_order_date,
  from
    sessions_total st
    left join orderlines_daily ordl using(date_reference, salesline)
  where 
    1=1
    and salesline IN ('MediaDE', 'SaturnDE')
  group by
    all

  UNION ALL

  select 
    date_reference,
    'Global' as salesline,
    sum(total_sessions_pdp_mp) as total_sessions_pdp_mp,
    sum(total_sessions_pdp_mp_mobile) as total_sessions_pdp_mp_mobile,
    sum(total_sessions_pdp_mp_desktop) as total_sessions_pdp_mp_desktop,
    sum(total_sessions_pdp_mp_app) as total_sessions_pdp_mp_app,
    sum(orderlines_accepted) as orderlines_accepted,
    sum(orderlines_w_incident) as orderlines_w_incident,
    sum(orderlines_refunded_order_date) as orderlines_refunded_order_date,
  from
    sessions_total st
    left join orderlines_daily ordl using(date_reference, salesline)
  where 
    1 = 1
  group by
    all
)

-- Get category breakdown from orderlines (for proportional distribution)
, orderlines_by_category as (
  select
    date(ordl.date_created) as date_reference,
    ordl.salesline,
    -- Category information from product cluster
    ifnull(fc.focus_category_id, 999) as focus_category_id,
    ifnull(fc.focus_category_name, 'Not Mapped') as focus_category_name,
    ifnull(nc.category_code_classification, 'Core Categories') as category_class,
    ifnull(nc.vertical_category_name, 'Core Categories') as vertical_category_name,
    -- Count orders by category for proportional distribution
    count(distinct ordl.order_id) as category_orders,
    sum(ordl.gmv_with_shipping) as category_gmv_with_shipping
  from
    ${ref("prod_sales_reports","orderlines_latest")} ordl
    -- Join with product cluster to get category information
    left join ${ref("mms-tra-latest-tables-p-0000","data_share_prod","v_sales_product_cluster")} sp
      on ${ref("udf","get_salesline")}(concat(sp.salesline,sp.country)) = ordl.salesline
      and sp.subject = ordl.product_id
    -- Join with category mappings to get focus categories
    left join ${ref("prod_sales_reports","category_mapping")} ct 
      on ct.category_code = sp.data.hierarchy.feature_frame_id
    left join ${ref("prod_sales_reports","focus_category")} fc 
      on fc.focus_category_id = ct.focus_category_id
    -- Join with new vertical categories
    left join ${ref("prod_sales_reports","new_vertical_categories")} nc 
      on nc.category_code = sp.data.hierarchy.feature_frame_id
  where
    1 = 1
    and lower(ordl.order_line_state) not in("refused","canceled")
    and ordl.order_id is not null
    and ${ref("udf","get_date_allowed_salesline")}(concat(sp.salesline,sp.country)) is not null
    and ${ref("udf","get_date_allowed_language")}(sp.language) is not null
  group by
    all
)

-- Calculate total orders per day/salesline for proportional distribution
, daily_totals as (
  select
    date_reference,
    salesline,
    sum(category_orders) as total_daily_orders,
    sum(category_gmv_with_shipping) as total_daily_gmv
  from
    orderlines_by_category
  group by
    all
)

-- Distribute sales_kpis_daily values proportionally across categories
, sales_with_categories as (
  select
    date_trunc(obc.date_reference, month) as month_reference,
    ${ref("udf","get_fiscal_year_from_date")}(obc.date_reference) as fiscal_year_id,
    skd.country,
    obc.salesline,
    -- Category information
    obc.focus_category_id,
    obc.focus_category_name,
    obc.category_class,
    obc.vertical_category_name,
    -- Distribute GMV proportionally based on category orders
    sum(
      skd.gmv_with_shipping_financial_view * 
      safe_divide(obc.category_orders, dt.total_daily_orders)
    ) as gmv_with_shipping_financial_view,
    sum(
      skd.gmv_with_shipping * 
      safe_divide(obc.category_orders, dt.total_daily_orders)
    ) as gmv_with_shipping,
    sum(
      skd.retail_gross_order_value * 
      safe_divide(obc.category_orders, dt.total_daily_orders)
    ) as retail_gross_order_value,
    sum(obc.category_orders) as orders
  from
    orderlines_by_category obc
    left join daily_totals dt using(date_reference, salesline)
    left join ${ref("prod_sales_reports","sales_kpis_daily")} skd 
      on skd.date_reference = obc.date_reference 
      and skd.salesline = obc.salesline
  where
    1 = 1
  group by
    all
)

select
  swc.month_reference,
  swc.fiscal_year_id,
  swc.country,
  swc.salesline,
  -- Category dimensions
  swc.focus_category_id,
  swc.focus_category_name,
  swc.vertical_category_name,
  swc.category_class,
  
  ---- metrics
  sum(swc.gmv_with_shipping_financial_view) as gmv_with_shipping_financial_view,
  sum(swc.gmv_with_shipping) as gmv_with_shipping,

  -- mp gross share
  --sum(gmv_with_shipping)/(sum(retail_gross_order_value) + sum(gmv_with_shipping))
  sum(swc.retail_gross_order_value) as retail_gross_order_value,

  max(lmv.active_sellers) as active_sellers,
  max(lmv.active_products) as active_products,

  sum(swc.orders) as orders,
  
  ---- conversion rate
  --sum(orders)/sum(total_sessions_pdp_mp),

  -- Raw counts : sessions 
  sum(combined.total_sessions_pdp_mp) as total_sessions_pdp_mp,
  sum(combined.total_sessions_pdp_mp_mobile) as total_sessions_pdp_mp_mobile,
  sum(combined.total_sessions_pdp_mp_desktop) as total_sessions_pdp_mp_desktop,
  sum(combined.total_sessions_pdp_mp_app) as total_sessions_pdp_mp_app,
  -- Raw counts: ordl
  sum(combined.orderlines_accepted) as orderlines_accepted,
  sum(combined.orderlines_w_incident) as orderlines_with_incident,
  sum(combined.orderlines_refunded_order_date) as orderlines_with_refunds,

from
  sales_with_categories swc
  left join last_month_values lmv using(date_reference,salesline)
  left join sessions_total_and_orderlines_union_all combined using(date_reference, salesline)
where
  1 = 1
  -- and date_trunc(date_reference,month) = '2025-06-01'
  -- and date_reference < current_date()
  -- and salesline in ('MediaSaturnDE' ) -- TEST
group by
  all